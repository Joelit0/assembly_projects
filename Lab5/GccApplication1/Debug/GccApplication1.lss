
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000048c  00000520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800104  00800104  00000524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000598  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f6  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ab  00000000  00000000  00000efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e8  00000000  00000000  000015a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000163  00000000  00000000  00001eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9b 01 	call	0x336	; 0x336 <main>
  9e:	0c 94 44 02 	jmp	0x488	; 0x488 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <numbers>:
.global numbers;
.section .text

numbers:
	number_0:
		cpi  r16, 0
  a6:	00 30       	cpi	r16, 0x00	; 0
		brne  number_1
  a8:	11 f4       	brne	.+4      	; 0xae <number_1>
		ldi r16,0b00000011
  aa:	03 e0       	ldi	r16, 0x03	; 3
		ret
  ac:	08 95       	ret

000000ae <number_1>:

	number_1:
		cpi  r16, 1
  ae:	01 30       	cpi	r16, 0x01	; 1
		brne  number_2
  b0:	11 f4       	brne	.+4      	; 0xb6 <number_2>
		ldi r16,0b10011111
  b2:	0f e9       	ldi	r16, 0x9F	; 159
		ret
  b4:	08 95       	ret

000000b6 <number_2>:

	number_2:
		cpi  r16, 2
  b6:	02 30       	cpi	r16, 0x02	; 2
		brne  number_3
  b8:	11 f4       	brne	.+4      	; 0xbe <number_3>
		ldi r16,0b00100101
  ba:	05 e2       	ldi	r16, 0x25	; 37
		ret
  bc:	08 95       	ret

000000be <number_3>:

	number_3:
		cpi  r16, 3
  be:	03 30       	cpi	r16, 0x03	; 3
		brne  number_4
  c0:	11 f4       	brne	.+4      	; 0xc6 <number_4>
		ldi r16,0b00001101
  c2:	0d e0       	ldi	r16, 0x0D	; 13
		ret
  c4:	08 95       	ret

000000c6 <number_4>:

	number_4:
		cpi  16, 4
  c6:	04 30       	cpi	r16, 0x04	; 4
		brne  number_5
  c8:	11 f4       	brne	.+4      	; 0xce <number_5>
		ldi r16,0b10011001
  ca:	09 e9       	ldi	r16, 0x99	; 153
		ret
  cc:	08 95       	ret

000000ce <number_5>:

	number_5:
		cpi  r16, 5
  ce:	05 30       	cpi	r16, 0x05	; 5
		brne  number_6
  d0:	11 f4       	brne	.+4      	; 0xd6 <number_6>
		ldi r16,0b01001001
  d2:	09 e4       	ldi	r16, 0x49	; 73
		ret
  d4:	08 95       	ret

000000d6 <number_6>:

	number_6:
		cpi  r16, 6
  d6:	06 30       	cpi	r16, 0x06	; 6
		brne  number_7
  d8:	11 f4       	brne	.+4      	; 0xde <number_7>
		ldi r16,0b01000001
  da:	01 e4       	ldi	r16, 0x41	; 65
		ret
  dc:	08 95       	ret

000000de <number_7>:

	number_7:
		cpi  r16, 7
  de:	07 30       	cpi	r16, 0x07	; 7
		brne  number_8
  e0:	11 f4       	brne	.+4      	; 0xe6 <number_8>
		ldi r16,0b00011111
  e2:	0f e1       	ldi	r16, 0x1F	; 31
		ret
  e4:	08 95       	ret

000000e6 <number_8>:

	number_8:
		cpi  r16, 8
  e6:	08 30       	cpi	r16, 0x08	; 8
		brne  number_9
  e8:	11 f4       	brne	.+4      	; 0xee <number_9>
		ldi r16,0b00000001
  ea:	01 e0       	ldi	r16, 0x01	; 1
		ret
  ec:	08 95       	ret

000000ee <number_9>:

	number_9:
		ldi r16,0b00011001
  ee:	09 e1       	ldi	r16, 0x19	; 25
  f0:	08 95       	ret

000000f2 <delay_joel>:
.global delay_joel;
.section .text

delay_joel:
	setup_display:
		ldi		r19,	0b00000001
  f2:	31 e0       	ldi	r19, 0x01	; 1
		out		DDRB,	r19
  f4:	34 b9       	out	0x04, r19	; 4
		out		PORTB,	r19
  f6:	35 b9       	out	0x05, r19	; 5
		ldi		r19,	0b10010000
  f8:	30 e9       	ldi	r19, 0x90	; 144
		out		DDRD,	r19			;configuro PD.4 y PD.7 como salidas
  fa:	3a b9       	out	0x0a, r19	; 10
		cbi		PORTD,	7			;PD.7 a 0, es el reloj serial, inicializo a 0
  fc:	5f 98       	cbi	0x0b, 7	; 11
		cbi		PORTD,	4			;PD.4 a 0, es el reloj del latch, inicializo a 0
  fe:	5c 98       	cbi	0x0b, 4	; 11

00000100 <sacanum>:
	sacanum:
		call	dato_serie
 100:	0e 94 88 00 	call	0x110	; 0x110 <dato_serie>
		mov		r16, r17
 104:	01 2f       	mov	r16, r17
		call	dato_serie
 106:	0e 94 88 00 	call	0x110	; 0x110 <dato_serie>
		sbi		PORTD, 4		;PD.4 a 1, es LCH el reloj del latch
 10a:	5c 9a       	sbi	0x0b, 4	; 11
		cbi		PORTD, 4		;PD.4 a 0, 
 10c:	5c 98       	cbi	0x0b, 4	; 11
		ret
 10e:	08 95       	ret

00000110 <dato_serie>:
		;Voy a sacar un byte por el 7seg
	dato_serie:
		ldi		r18, 0x08 ; lo utilizo para contar 8 (8 bits)
 110:	28 e0       	ldi	r18, 0x08	; 8

00000112 <loop_dato1>:
	loop_dato1:
		cbi		PORTD, 7		;SCLK = 0 reloj en 0
 112:	5f 98       	cbi	0x0b, 7	; 11
		lsr		r16				;roto a la derecha r16 y el bit 0 se pone en el C
 114:	06 95       	lsr	r16
		brcs	loop_dato2		;salta si C=1
 116:	10 f0       	brcs	.+4      	; 0x11c <loop_dato2>
		cbi		PORTB, 0		;SD = 0 escribo un 0 
 118:	28 98       	cbi	0x05, 0	; 5
		rjmp	loop_dato3
 11a:	01 c0       	rjmp	.+2      	; 0x11e <loop_dato3>

0000011c <loop_dato2>:
	loop_dato2:
		sbi		PORTB, 0		;SD = 1 escribo un 1
 11c:	28 9a       	sbi	0x05, 0	; 5

0000011e <loop_dato3>:
	loop_dato3:
		sbi		PORTD, 7		;SCLK = 1 reloj en 1
 11e:	5f 9a       	sbi	0x0b, 7	; 11
		dec		r18
 120:	2a 95       	dec	r18
		brne	loop_dato1; cuando r17 llega a 0 corta y vuelve
 122:	b9 f7       	brne	.-18     	; 0x112 <loop_dato1>
 124:	08 95       	ret

00000126 <__vector_21>:

unsigned char *pr16 = 0x10;
unsigned char *pr17 = 0x11;

ISR(ADC_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	uint16_t duty = ADC;
 158:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 15c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	OCR1B = duty;
 160:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 164:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>

	if (i != 100)
 168:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <i>
 16c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <i+0x1>
 170:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <i+0x2>
 174:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <i+0x3>
 178:	84 36       	cpi	r24, 0x64	; 100
 17a:	91 05       	cpc	r25, r1
 17c:	a1 05       	cpc	r26, r1
 17e:	b1 05       	cpc	r27, r1
 180:	21 f1       	breq	.+72     	; 0x1ca <__vector_21+0xa4>
	{
		suma += ADC;
 182:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 186:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 18a:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <suma>
 18e:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <suma+0x1>
 192:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <suma+0x2>
 196:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <suma+0x3>
 19a:	42 0f       	add	r20, r18
 19c:	53 1f       	adc	r21, r19
 19e:	61 1d       	adc	r22, r1
 1a0:	71 1d       	adc	r23, r1
 1a2:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <suma>
 1a6:	50 93 15 01 	sts	0x0115, r21	; 0x800115 <suma+0x1>
 1aa:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <suma+0x2>
 1ae:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <suma+0x3>
		i++;
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	a1 1d       	adc	r26, r1
 1b6:	b1 1d       	adc	r27, r1
 1b8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <i>
 1bc:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <i+0x1>
 1c0:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <i+0x2>
 1c4:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <i+0x3>
 1c8:	91 c0       	rjmp	.+290    	; 0x2ec <__vector_21+0x1c6>
	} else {
		promedio = suma / 100;
 1ca:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <suma>
 1ce:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <suma+0x1>
 1d2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <suma+0x2>
 1d6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <suma+0x3>
 1da:	24 e6       	ldi	r18, 0x64	; 100
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__divmodsi4>
 1e6:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <promedio>
 1ea:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <promedio+0x1>
 1ee:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <promedio+0x2>
 1f2:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <promedio+0x3>
		voltage = (5000 * promedio) / 1024;
 1f6:	a8 e8       	ldi	r26, 0x88	; 136
 1f8:	b3 e1       	ldi	r27, 0x13	; 19
 1fa:	0e 94 08 02 	call	0x410	; 0x410 <__muluhisi3>
 1fe:	6b 01       	movw	r12, r22
 200:	7c 01       	movw	r14, r24
 202:	99 23       	and	r25, r25
 204:	34 f4       	brge	.+12     	; 0x212 <__vector_21+0xec>
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	c2 0e       	add	r12, r18
 20a:	23 e0       	ldi	r18, 0x03	; 3
 20c:	d2 1e       	adc	r13, r18
 20e:	e1 1c       	adc	r14, r1
 210:	f1 1c       	adc	r15, r1
 212:	0b 2e       	mov	r0, r27
 214:	ba e0       	ldi	r27, 0x0A	; 10
 216:	f5 94       	asr	r15
 218:	e7 94       	ror	r14
 21a:	d7 94       	ror	r13
 21c:	c7 94       	ror	r12
 21e:	ba 95       	dec	r27
 220:	d1 f7       	brne	.-12     	; 0x216 <__vector_21+0xf0>
 222:	b0 2d       	mov	r27, r0
 224:	c0 92 0c 01 	sts	0x010C, r12	; 0x80010c <voltage>
 228:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <voltage+0x1>
 22c:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <voltage+0x2>
 230:	f0 92 0f 01 	sts	0x010F, r15	; 0x80010f <voltage+0x3>
		
		a = voltage % 10000 / 1000;
 234:	c7 01       	movw	r24, r14
 236:	b6 01       	movw	r22, r12
 238:	20 e1       	ldi	r18, 0x10	; 16
 23a:	37 e2       	ldi	r19, 0x27	; 39
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__divmodsi4>
 244:	0f 2e       	mov	r0, r31
 246:	f8 ee       	ldi	r31, 0xE8	; 232
 248:	8f 2e       	mov	r8, r31
 24a:	f3 e0       	ldi	r31, 0x03	; 3
 24c:	9f 2e       	mov	r9, r31
 24e:	a1 2c       	mov	r10, r1
 250:	b1 2c       	mov	r11, r1
 252:	f0 2d       	mov	r31, r0
 254:	a5 01       	movw	r20, r10
 256:	94 01       	movw	r18, r8
 258:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__divmodsi4>
 25c:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <a+0x1>
 260:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <a>
		b = voltage % 1000 / 100;
 264:	c7 01       	movw	r24, r14
 266:	b6 01       	movw	r22, r12
 268:	a5 01       	movw	r20, r10
 26a:	94 01       	movw	r18, r8
 26c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__divmodsi4>
 270:	0f 2e       	mov	r0, r31
 272:	f4 e6       	ldi	r31, 0x64	; 100
 274:	8f 2e       	mov	r8, r31
 276:	91 2c       	mov	r9, r1
 278:	a1 2c       	mov	r10, r1
 27a:	b1 2c       	mov	r11, r1
 27c:	f0 2d       	mov	r31, r0
 27e:	a5 01       	movw	r20, r10
 280:	94 01       	movw	r18, r8
 282:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__divmodsi4>
 286:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <b+0x1>
 28a:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <b>
		c = voltage % 100 / 10;
 28e:	c7 01       	movw	r24, r14
 290:	b6 01       	movw	r22, r12
 292:	a5 01       	movw	r20, r10
 294:	94 01       	movw	r18, r8
 296:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__divmodsi4>
 29a:	0f 2e       	mov	r0, r31
 29c:	fa e0       	ldi	r31, 0x0A	; 10
 29e:	8f 2e       	mov	r8, r31
 2a0:	91 2c       	mov	r9, r1
 2a2:	a1 2c       	mov	r10, r1
 2a4:	b1 2c       	mov	r11, r1
 2a6:	f0 2d       	mov	r31, r0
 2a8:	a5 01       	movw	r20, r10
 2aa:	94 01       	movw	r18, r8
 2ac:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__divmodsi4>
 2b0:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <c+0x1>
 2b4:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <c>
		d = voltage % 10 / 1;
 2b8:	c7 01       	movw	r24, r14
 2ba:	b6 01       	movw	r22, r12
 2bc:	a5 01       	movw	r20, r10
 2be:	94 01       	movw	r18, r8
 2c0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__divmodsi4>
 2c4:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 2c8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>

		suma = 0;
 2cc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <suma>
 2d0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <suma+0x1>
 2d4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <suma+0x2>
 2d8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <suma+0x3>
		i = 0;
 2dc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <i>
 2e0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <i+0x1>
 2e4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <i+0x2>
 2e8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <i+0x3>
	}
}
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	df 90       	pop	r13
 30a:	cf 90       	pop	r12
 30c:	bf 90       	pop	r11
 30e:	af 90       	pop	r10
 310:	9f 90       	pop	r9
 312:	8f 90       	pop	r8
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <ADC_init>:

void ADC_init(void)
{
	ADMUX |= (1<<REFS0) | (0<<MUX0);
 31e:	ec e7       	ldi	r30, 0x7C	; 124
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	80 64       	ori	r24, 0x40	; 64
 326:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADSC)  | (1<<ADATE) | (1<<ADIE) | (1<< ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 328:	ea e7       	ldi	r30, 0x7A	; 122
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	8f 6e       	ori	r24, 0xEF	; 239
 330:	80 83       	st	Z, r24
	sei();
 332:	78 94       	sei
 334:	08 95       	ret

00000336 <main>:
}

int main(void)
{	
	ADC_init();
 336:	0e 94 8f 01 	call	0x31e	; 0x31e <ADC_init>

	while (1)
	{
		*pr16=d;// cargo valor para delay0
 33a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <pr16>
 33e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <pr16+0x1>
 342:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 346:	80 83       	st	Z, r24
		numbers();
 348:	0e 94 53 00 	call	0xa6	; 0xa6 <numbers>
		*pr17=0b00010000; //cargo valor para delay1
 34c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 350:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 354:	80 e1       	ldi	r24, 0x10	; 16
 356:	80 83       	st	Z, r24
		delay_joel();
 358:	0e 94 79 00 	call	0xf2	; 0xf2 <delay_joel>
		
		*pr16=c;// cargo valor para delay0
 35c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <pr16>
 360:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <pr16+0x1>
 364:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <c>
 368:	80 83       	st	Z, r24
		numbers();
 36a:	0e 94 53 00 	call	0xa6	; 0xa6 <numbers>
		*pr17=0b00100000; //cargo valor para delay1
 36e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 372:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 376:	80 e2       	ldi	r24, 0x20	; 32
 378:	80 83       	st	Z, r24
		delay_joel();
 37a:	0e 94 79 00 	call	0xf2	; 0xf2 <delay_joel>
		
		*pr16=b;// cargo valor para delay0
 37e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <pr16>
 382:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <pr16+0x1>
 386:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <b>
 38a:	80 83       	st	Z, r24
		numbers();
 38c:	0e 94 53 00 	call	0xa6	; 0xa6 <numbers>
		*pr17=0b01000000; //cargo valor para delay1
 390:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 394:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 398:	80 e4       	ldi	r24, 0x40	; 64
 39a:	80 83       	st	Z, r24
		delay_joel();
 39c:	0e 94 79 00 	call	0xf2	; 0xf2 <delay_joel>
		
		*pr16=a;// cargo valor para delay0
 3a0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <pr16>
 3a4:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <pr16+0x1>
 3a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <a>
 3ac:	80 83       	st	Z, r24
		numbers();
 3ae:	0e 94 53 00 	call	0xa6	; 0xa6 <numbers>
		*pr16 &= (0<<0 | 1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5| 1<<6 | 1<<7);
 3b2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <pr16>
 3b6:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <pr16+0x1>
 3ba:	80 81       	ld	r24, Z
 3bc:	8e 7f       	andi	r24, 0xFE	; 254
 3be:	80 83       	st	Z, r24
		
		*pr17=0b10000000; //cargo valor para delay1
 3c0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3c4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3c8:	80 e8       	ldi	r24, 0x80	; 128
 3ca:	80 83       	st	Z, r24
		delay_joel();
 3cc:	0e 94 79 00 	call	0xf2	; 0xf2 <delay_joel>
 3d0:	b4 cf       	rjmp	.-152    	; 0x33a <main+0x4>

000003d2 <__divmodsi4>:
 3d2:	05 2e       	mov	r0, r21
 3d4:	97 fb       	bst	r25, 7
 3d6:	1e f4       	brtc	.+6      	; 0x3de <__divmodsi4+0xc>
 3d8:	00 94       	com	r0
 3da:	0e 94 00 02 	call	0x400	; 0x400 <__negsi2>
 3de:	57 fd       	sbrc	r21, 7
 3e0:	07 d0       	rcall	.+14     	; 0x3f0 <__divmodsi4_neg2>
 3e2:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodsi4>
 3e6:	07 fc       	sbrc	r0, 7
 3e8:	03 d0       	rcall	.+6      	; 0x3f0 <__divmodsi4_neg2>
 3ea:	4e f4       	brtc	.+18     	; 0x3fe <__divmodsi4_exit>
 3ec:	0c 94 00 02 	jmp	0x400	; 0x400 <__negsi2>

000003f0 <__divmodsi4_neg2>:
 3f0:	50 95       	com	r21
 3f2:	40 95       	com	r20
 3f4:	30 95       	com	r19
 3f6:	21 95       	neg	r18
 3f8:	3f 4f       	sbci	r19, 0xFF	; 255
 3fa:	4f 4f       	sbci	r20, 0xFF	; 255
 3fc:	5f 4f       	sbci	r21, 0xFF	; 255

000003fe <__divmodsi4_exit>:
 3fe:	08 95       	ret

00000400 <__negsi2>:
 400:	90 95       	com	r25
 402:	80 95       	com	r24
 404:	70 95       	com	r23
 406:	61 95       	neg	r22
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	8f 4f       	sbci	r24, 0xFF	; 255
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	08 95       	ret

00000410 <__muluhisi3>:
 410:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 414:	a5 9f       	mul	r26, r21
 416:	90 0d       	add	r25, r0
 418:	b4 9f       	mul	r27, r20
 41a:	90 0d       	add	r25, r0
 41c:	a4 9f       	mul	r26, r20
 41e:	80 0d       	add	r24, r0
 420:	91 1d       	adc	r25, r1
 422:	11 24       	eor	r1, r1
 424:	08 95       	ret

00000426 <__udivmodsi4>:
 426:	a1 e2       	ldi	r26, 0x21	; 33
 428:	1a 2e       	mov	r1, r26
 42a:	aa 1b       	sub	r26, r26
 42c:	bb 1b       	sub	r27, r27
 42e:	fd 01       	movw	r30, r26
 430:	0d c0       	rjmp	.+26     	; 0x44c <__udivmodsi4_ep>

00000432 <__udivmodsi4_loop>:
 432:	aa 1f       	adc	r26, r26
 434:	bb 1f       	adc	r27, r27
 436:	ee 1f       	adc	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	a2 17       	cp	r26, r18
 43c:	b3 07       	cpc	r27, r19
 43e:	e4 07       	cpc	r30, r20
 440:	f5 07       	cpc	r31, r21
 442:	20 f0       	brcs	.+8      	; 0x44c <__udivmodsi4_ep>
 444:	a2 1b       	sub	r26, r18
 446:	b3 0b       	sbc	r27, r19
 448:	e4 0b       	sbc	r30, r20
 44a:	f5 0b       	sbc	r31, r21

0000044c <__udivmodsi4_ep>:
 44c:	66 1f       	adc	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	88 1f       	adc	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	1a 94       	dec	r1
 456:	69 f7       	brne	.-38     	; 0x432 <__udivmodsi4_loop>
 458:	60 95       	com	r22
 45a:	70 95       	com	r23
 45c:	80 95       	com	r24
 45e:	90 95       	com	r25
 460:	9b 01       	movw	r18, r22
 462:	ac 01       	movw	r20, r24
 464:	bd 01       	movw	r22, r26
 466:	cf 01       	movw	r24, r30
 468:	08 95       	ret

0000046a <__umulhisi3>:
 46a:	a2 9f       	mul	r26, r18
 46c:	b0 01       	movw	r22, r0
 46e:	b3 9f       	mul	r27, r19
 470:	c0 01       	movw	r24, r0
 472:	a3 9f       	mul	r26, r19
 474:	70 0d       	add	r23, r0
 476:	81 1d       	adc	r24, r1
 478:	11 24       	eor	r1, r1
 47a:	91 1d       	adc	r25, r1
 47c:	b2 9f       	mul	r27, r18
 47e:	70 0d       	add	r23, r0
 480:	81 1d       	adc	r24, r1
 482:	11 24       	eor	r1, r1
 484:	91 1d       	adc	r25, r1
 486:	08 95       	ret

00000488 <_exit>:
 488:	f8 94       	cli

0000048a <__stop_program>:
 48a:	ff cf       	rjmp	.-2      	; 0x48a <__stop_program>
